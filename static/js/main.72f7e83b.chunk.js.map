{"version":3,"sources":["components/post/post.tsx","components/spinner/spinner.tsx","components/feed/actions.ts","components/feed/feed.tsx","screens/home/home.tsx","App.tsx","reportWebVitals.ts","network-requests/requests.ts","components/feed/saga.ts","redux/reducers/feedReducer.ts","screens/home/actions.ts","redux/reducers/userReducer.ts","redux/store.ts","index.tsx"],"names":["Post","username","title","body","children","className","Spinner","Fragment","GET_POSTS","SET_POSTS","Feed","postList","useSelector","state","feed","posts","dispatch","useDispatch","useEffect","type","length","map","e","userId","toString","id","Home","style","textAlign","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","BASE_URL","post","a","axios","get","response","users","data","user","getPosts","feedWatcher","handleGetPosts","takeLatest","action","call","put","console","error","initialState","SET_USERS","reducers","combineReducers","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72f7e83b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PostProps from \"../../interfaces/props/PostProps\";\r\n\r\nconst Post: React.FC<PostProps> = ({ username, title, body, children }) => {\r\n    return (\r\n        <div className=\"feed__post\">\r\n            <div className=\"feed__post__username\">{username}</div>\r\n            {/* <hr className=\"feed__post__divider\" /> */}\r\n\r\n            <div className=\"feed__post__body\">\r\n                <div className=\"feed__post__body__title\">{title}</div>\r\n                <div className=\"feed__post__body__content\">\r\n                    {children && children}\r\n                    {body}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport \"./spinner.scss\";\r\n\r\nconst Spinner = () => {\r\n    // return <ReactComponent />;\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"loadingio-spinner-disk-nhajlk4gbpl\">\r\n                <div className=\"ldio-0xbwh66nwucj\">\r\n                    <div>\r\n                        <div></div>\r\n                        <div></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import { AppAction } from \"../../interfaces/action\";\r\nimport { Post } from \"../../interfaces/post\";\r\n\r\nexport const GET_POSTS = \"get_posts\";\r\nexport const SET_POSTS = \"set_posts\";\r\n\r\nexport const getPosts = (): AppAction<undefined> => ({ type: GET_POSTS });\r\nexport const setPosts = (posts: Post[]): AppAction<Post[]> => ({\r\n    type: SET_POSTS,\r\n    data: posts,\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Post as PostType } from \"../../interfaces/post\";\r\nimport Post from \"../post/post\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport { getPosts } from \"./actions\";\r\nimport \"./feed.scss\";\r\n\r\nconst Feed = () => {\r\n    const postList = useSelector(\r\n        (state: any) => state.feed.posts\r\n    ) as PostType[];\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getPosts());\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"feed\">\r\n            {postList.length ? (\r\n                postList.map((e) => (\r\n                    <Post\r\n                        key={e.id}\r\n                        username={e.userId.toString()}\r\n                        title={e.title}\r\n                        body={e.body}\r\n                    />\r\n                ))\r\n            ) : (\r\n                <Spinner />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Feed;\r\n","import React from \"react\";\r\nimport Feed from \"../../components/feed/feed\";\r\n\r\nconst Home: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1 style={{ textAlign: \"center\" }}>Feed</h1>\r\n            <Feed />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./screens/home/home\";\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </BrowserRouter>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\nimport { Post } from \"../interfaces/post\";\r\nimport { User } from \"../interfaces/user\";\r\n\r\nconst BASE_URL = \"https://jsonplaceholder.typicode.com\";\r\n\r\nexport const user = {\r\n    getAllUsers: async () => {\r\n        const response = await axios.get<User[]>(`${BASE_URL}/users`);\r\n        const users = response.data;\r\n        return users;\r\n    },\r\n    getUser: async (id: number) => {\r\n        const response = await axios.get<User>(`${BASE_URL}/users/${id}`);\r\n        const user = response.data;\r\n        return user;\r\n    },\r\n};\r\n\r\nexport const post = {\r\n    getPosts: async () => {\r\n        const response = await axios.get<Post[]>(`${BASE_URL}/posts`);\r\n        const posts = response.data;\r\n        return posts;\r\n    },\r\n};\r\n","import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { Post } from \"../../interfaces/post\";\r\nimport { post } from \"../../network-requests/requests\";\r\nimport { GET_POSTS, setPosts } from \"./actions\";\r\n\r\nexport function* feedWatcher() {\r\n    yield takeLatest(GET_POSTS, handleGetPosts);\r\n}\r\n\r\nexport function* handleGetPosts(action: any): any {\r\n    try {\r\n        const response = yield call(post.getPosts);\r\n        yield put(setPosts(response));\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n","import { SET_POSTS } from \"../../components/feed/actions\";\r\nimport { AppAction } from \"../../interfaces/action\";\r\nimport { Post } from \"../../interfaces/post\";\r\n\r\nconst initialState: {\r\n    posts: Post[];\r\n} = {\r\n    posts: [],\r\n};\r\n\r\nexport const feedReducer = (state = initialState, action: AppAction<any>) => {\r\n    switch (action.type) {\r\n        case SET_POSTS:\r\n            return { posts: action.data };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { AppAction } from \"../../interfaces/action\";\r\nimport { User } from \"../../interfaces/user\";\r\n\r\nexport const GET_USERS = \"get_users\";\r\nexport const SET_USERS = \"set_users\";\r\n\r\nexport const getUsers = (): AppAction<any> => ({ type: GET_USERS });\r\nexport const setUsers = (users: User[]): AppAction<User[]> => ({\r\n    type: SET_USERS,\r\n    data: users,\r\n});\r\n","import { AppAction } from \"../../interfaces/action\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { GET_USERS, SET_USERS } from \"../../screens/home/actions\";\r\n\r\nconst initialState: {\r\n    users: User[];\r\n} = {\r\n    users: [],\r\n};\r\n\r\nexport const userReducer = (state = initialState, action: AppAction<any>) => {\r\n    switch (action.type) {\r\n        case SET_USERS:\r\n            return { users: action.data };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { feedWatcher } from \"../components/feed/saga\";\r\nimport { feedReducer } from \"./reducers/feedReducer\";\r\nimport { userReducer } from \"./reducers/userReducer\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst reducers = combineReducers({\r\n    user: userReducer,\r\n    feed: feedReducer,\r\n});\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nconst store = createStore(reducers, {}, applyMiddleware(...middlewares));\r\n\r\nsagaMiddleware.run(feedWatcher);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}